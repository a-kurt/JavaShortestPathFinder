import java.util.*;

/**
 * CSE222Dijkstra represents an implementation of the Dijkstra's algorithm
 * used to find the shortest path in a CSE222Graph object.
 */
public class CSE222Dijkstra {
    private CSE222Graph graph;
    private List<Coordinate> path;

    /**
     * Constructs a CSE222Dijkstra object based on the provided CSE222Graph.
     *
     * @param graph the CSE222Graph object representing the graph
     * @throws NullPointerException if graph is null.
     */
    public CSE222Dijkstra(CSE222Graph graph) throws NullPointerException {
        if (graph == null) {
            throw new NullPointerException("Graph can't be null.");
        }
        this.graph = graph;
        this.path = new ArrayList<>();
    }

    /**
     * Finds the shortest path in the graph using Dijkstra's algorithm.
     *
     * @return the list of coordinates representing the shortest path
     * @throws IllegalArgumentException if a valid path cannot be found
     */
    public List<Coordinate> findPath() throws IllegalArgumentException {
        Map<Coordinate, Double> distances = new HashMap<>();
        Map<Coordinate, Coordinate> parent = new HashMap<>();
        PriorityQueue<Coordinate> priorityQueue = new PriorityQueue<>(Comparator.comparingDouble(distances::get));
        Coordinate start = this.graph.getMap().getStart();
        Coordinate end = this.graph.getMap().getEnd();

        for (Coordinate coordinate : this.graph.getGraph().keySet()) {
            if (coordinate.equals(start))
                distances.put(coordinate, 0.0);
            else
                distances.put(coordinate, Double.MAX_VALUE);
            priorityQueue.offer(coordinate);
        }

        while (!priorityQueue.isEmpty()) {
            Coordinate curr = priorityQueue.poll();
            if (curr.equals(end)) {
                break;
            }

            List<Coordinate> neighbors = this.graph.getGraph().get(curr);
            for (Coordinate neighbor : neighbors) {
                double dist = Math.sqrt((curr.getX() - neighbor.getX()) * (curr.getX() - neighbor.getX()) + (curr.getY() - neighbor.getY()) * (curr.getY() - neighbor.getY()) );
                Double newDistance = distances.get(curr) + dist;
                if (newDistance < distances.get(neighbor)) {
                    distances.put(neighbor, newDistance);
                    parent.put(neighbor, curr);
                    priorityQueue.remove(neighbor);
                    priorityQueue.offer(neighbor);
                }
            }
        }

        Coordinate current = end;
        while (current != null) {
            this.path.add(0, current);
            current = parent.get(current);
        }
        if (!this.path.get(0).equals(start) || !this.path.get(this.path.size()-1).equals(end)) {
            throw new IllegalArgumentException("Can't find a path that is valid.");
        }
        return this.path;
    }

    /**
     * Returns the path generated by Dijkstra's algorithm.
     * @return the list of coordinates
     */
    public List<Coordinate> getPath() {
        return path;
    }
}
