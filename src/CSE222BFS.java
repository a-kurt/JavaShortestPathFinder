import java.util.*;

/**
 * CSE222BFS represents an implementation of the Breadth-First Search (BFS) algorithm
 * used to find the shortest path in a CSE222Graph object.
 */
public class CSE222BFS {
    private CSE222Graph graph;
    private List<Coordinate> path;

    /**
     * Constructs a CSE222BFS object based on the provided CSE222Graph.
     * @param graph the CSE222Graph object representing the graph
     * @throws NullPointerException if the given graph is null
     */
    public CSE222BFS(CSE222Graph graph) {
        if (graph == null) {
            throw new NullPointerException("Graph can't be null.");
        }
        this.graph = graph;
        this.path = new ArrayList<>();
    }

    /**
     * Finds the shortest path in the graph using the Breadth-First Search (BFS) algorithm.
     *
     * @return the list of coordinates representing the shortest path
     * @throws IllegalArgumentException if a valid path cannot be found
     */
    public List<Coordinate> findPath() throws IllegalArgumentException {
        Map<Coordinate, Boolean> visited = new HashMap<>();
        Map<Coordinate, Coordinate> parent = new HashMap<>();
        Queue<Coordinate> queue = new LinkedList<>();
        Coordinate start = this.graph.getMap().getStart();
        Coordinate end = this.graph.getMap().getEnd();

        for (Coordinate coordinate : this.graph.getGraph().keySet()) {
            visited.put(coordinate, false);
        }

        visited.put(start, true);
        queue.offer(start);

        while(!queue.isEmpty()) {
            Coordinate curr = queue.poll();

            if (curr.equals(end)) {
                break;
            }

            for (Coordinate neighbor : this.graph.getGraph().get(curr)) {
                if (!visited.get(neighbor)) {
                    visited.put(neighbor, true);
                    parent.put(neighbor, curr);
                    queue.offer(neighbor);
                }
            }
        }

        Coordinate current = end;
        while (current != null) {
            this.path.add(0, current);
            current = parent.get(current);
        }
        if (!this.path.get(0).equals(start) || !this.path.get(this.path.size()-1).equals(end)) {
            throw new IllegalArgumentException("Can't find a path that is valid.");
        }

        return this.path;
    }

    /**
     * Returns the path generated by the BFS algorithm.
     * @return the list of coordinates representing the path
     */
    public List<Coordinate> getPath() {
        return path;
    }
}
